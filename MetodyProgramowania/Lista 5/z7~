#lang plait

( define-type Prop
   ( var [ v : String ])
   ( conj [ l : Prop ] [r : Prop ])
   ( disj [ l : Prop ] [r : Prop ])
   ( neg [ f : Prop ]) )

(define (remove-duplicates lst)
  (cond
    [(empty? lst) empty]
    [(member (first lst) (rest lst)) (remove-duplicates (rest lst))]
    [else (cons (first lst) (remove-duplicates (rest lst)))]))


(define (free-vars prop)
  (cond
    ((var? prop) (list (var-v prop)))
    ((neg? prop) (free-vars (neg-f prop)))
    ((conj? prop) (remove-duplicates (append (free-vars (conj-l prop)) (free-vars (conj-r prop)))))
    ((disj? prop) (remove-duplicates (append (free-vars (disj-l prop)) (free-vars (disj-r prop)))))))


(define my-prop
  (conj (var "p") (disj (var "p") (neg (var "r")))))

(free-vars my-prop)