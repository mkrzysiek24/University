#lang plait

;(('a -> 'b) 'a -> 'b)
( define ( apply f x) (f x))

;(('a -> 'b) ('c -> 'a) -> ('c -> 'b))
( define ( compose f g) ( lambda (x) (f (g x))))

;(('a 'b -> 'c) -> ('b 'a -> 'c))
( define ( flip f) ( lambda (x y) (f y x)))

;(('a 'b -> 'c) -> ('a -> ('b -> 'c)))
( define ( curry f) ( lambda (x) ( lambda (y) (f x y))))

;Zadanie 3 (1)
;(curry compose)
;(('_a -> '_b) -> (('_c -> '_a) -> ('_c -> '_b)))

;Zadanie 3 (2)

;(curry compose)
;(('_a -> '_b) -> (('_c -> '_a) -> ('_c -> '_b)))

;(( curry compose ) ( curry compose ))
;(('_a -> ('_b -> '_c)) -> ('_a -> (('_d -> '_b) -> ('_d -> '_c))))

;Zadanie 3 (3)

;(curry compose)
;(('_a -> '_b) -> (('_c -> '_a) -> ('_c -> '_b)))

;( curry apply )
;(('_a -> '_b) -> ('_a -> '_b))

;(( curry compose ) ( curry apply ))
;(('_a -> ('_b -> '_c)) -> ('_a -> ('_b -> '_c)))

;Zadanie 3 (4)

;( curry apply )
;(('_a -> '_b) -> ('_a -> '_b))

;(curry compose)
;(('_a -> '_b) -> (('_c -> '_a) -> ('_c -> '_b)))

;(( curry apply ) ( curry compose ))
;(('_a -> '_b) -> (('_c -> '_a) -> ('_c -> '_b)))

;Zadanie 3 (5)

;( compose curry flip )
;(('_a '_b -> '_c) -> ('_b -> ('_a -> '_c)))