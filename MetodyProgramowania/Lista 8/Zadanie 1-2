#lang racket

(define (last-mcons lst)
  (if (null? (mcdr lst))
      lst
      (last-mcons (mcdr lst))))
  
(define (cycle! lst)
  (set-mcdr! (last-mcons lst) lst))
  
(define (mreverse! lst)
  (define (reverse-helper prev current)
    (if (null? current)
        (void)
        (let ([next (mcdr current)])
          (set-mcdr! current prev)
          (reverse-helper current next))))
  (reverse-helper '() lst))

(define example-mlist (mcons 1 (mcons 2 (mcons 3 '()))))
example-mlist
(define end (last-pair example-mlist))
(mreverse! example-mlist)
end
(cycle! end)
end