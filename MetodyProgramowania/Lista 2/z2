#lang racket

(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1)) (fib (- n 2))))))

; (fib 5) -> (cond ...)
; -> (+ (fib 4) (fib 3))
; -> (+ (+ (fib 3) (fib 2)) (fib 3))
; ...
; -> (+ (+ (+ (+ (fib 1) (fib 0)) (fib 1)) (+ (fib 1) (fib 0))) (+ (+ (fib 1) (fib 0)) (fib 1)))
; -> (+ (+ (+ (+ 1 0) 1) (+ 1 0)) (+ (+ 1 0) 1))
; -> (+ (+ (+ 1 1) 1) (+ 1 1))
; -> (+ (+ 2 1) 2)
; -> (+ 3 2)
; -> 5

(define (fib-iter n)
  (define (it n a1 a2)
    (if (= n 0)
        (+ a1 a2)
        (it (- n 1) a2 (+ a1 a2))))
  (it (- n 2) 0 1))

; (fib-iter 5)
; -> (it 3 0 1)
; -> (if (= 3 0) 1 (it 2 1 1))
; -> (it 2 1 1)
; -> (it 1 1 2)
; -> (it 0 2 3)
; -> 5

(fib 13)
(fib-iter 13)
(fib 16)
(fib-iter 16)

(define (measure-time f)
  (let ((start-time (current-inexact-milliseconds)))
    (f)
    (- (current-inexact-milliseconds) start-time)))

(define n-time (measure-time (λ () (fib 13))))
(define f-time (measure-time (λ () (fib-iter 13))))

(displayln (format "merge-sort time: ~a ms" n-time))
(displayln (format "quick-sort time: ~a ms" f-time))