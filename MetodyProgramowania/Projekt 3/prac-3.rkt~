#lang plait

;; abstract syntax -------------------------------

(define-type-alias Value Number)

(define-type Op
  (add) (sub) (mul) (leq))

(define-type Exp
  (defineE [d : (Listof Exp)] [e : Exp])
  (funE [name : Symbol] [x : (Listof Symbol)] [e : Exp])
  (numE [n : Number])
  (varE [x : Symbol])
  (opE [l : Exp] [op : Op] [r : Exp])
  (ifE [b : Exp] [l : Exp] [r : Exp])
  (letE [x : Symbol] [e1 : Exp] [e2 : Exp])
  (appE [e1 : Symbol] [e2 : (Listof Exp)]))

;; parse ----------------------------------------

(define (parse [s : S-Exp]) : Exp
  (cond
    [(s-exp-match? `NUMBER s)
     (numE (s-exp->number s))]
    [(s-exp-match? `{ANY SYMBOL ANY} s)
     (opE (parse (first (s-exp->list s)))
          (parse-op (s-exp->symbol (second (s-exp->list s))))
          (parse (third (s-exp->list s))))]
    [(s-exp-match? `{ifz ANY then ANY else ANY} s)
     (ifE (parse (second (s-exp->list s)))
          (parse (fourth (s-exp->list s)))
          (parse (fourth (rest (rest (s-exp->list s))))))]
    [(s-exp-match? `SYMBOL s)
     (varE (s-exp->symbol s))]
    [(s-exp-match? `{let SYMBOL be ANY in ANY} s)
     (letE (s-exp->symbol (second (s-exp->list s)))
           (parse (fourth (s-exp->list s)))
           (parse (fourth (rest (rest (s-exp->list s))))))]
    [(s-exp-match? `{ANY ANY} s)
     (appE (s-exp->symbol (first (s-exp->list s)))
           (parse-list (s-exp->list (second (s-exp->list s)))))]
    [(s-exp-match? `{define {ANY ...} for ANY} s)
     (defineE (parse-list (s-exp->list (second (s-exp->list s))))
       (parse (fourth (s-exp->list s))))]
    [(s-exp-match? `[fun SYMBOL (SYMBOL ...) = ANY] s)
     (funE (s-exp->symbol (second (s-exp->list s)))
           (parse-list-sym (s-exp->list (third (s-exp->list s))))
           (parse (fourth (rest (s-exp->list s)))))]
    [else (error 'parse "invalid input")]))

(define (parse-list [exp : (Listof S-Exp)]) : (Listof Exp)
  (if (empty? exp)
      '()
      (cons (parse (first exp)) (parse-list (rest exp)))))

(define (parse-list-sym [exp : (Listof S-Exp)]) : (Listof Symbol)
  (if (empty? exp)
      '()
      (cons (s-exp->symbol (first exp)) (parse-list-sym (rest exp)))))
  
(define (parse-op [op : Symbol]) : Op
  (cond
    [(eq? op '+) (add)]
    [(eq? op '-) (sub)]
    [(eq? op '*) (mul)]
    [(eq? op '<=) (leq)]
    [else (error 'parse "unknown operator")]))

(parse `{define
  {[fun fact (n) = {ifz n then 1 else {n * {fact ({n - 1})}}}]}
  for
  {fact (5)}})

(parse `{define
  {[fun even (n) = {ifz n then 0 else {odd ({n - 1})}}]
   [fun odd (n) = {ifz n then 42 else {even ({n - 1})}}]}
  for
  {even (1024)}})

(parse `{define
          {[fun gcd (m n) = {ifz n
                                 then m
                                 else {ifz {m <= n}
                                           then {gcd (m {n - m})}
                                           else {gcd ({m - n} n)}}}]}
          for
          {gcd (81 63)}})

;; environments

(define-type Binding
  (bind [name : Symbol]
        [val : Value]))

(define-type-alias Env (Listof Binding))

(define mt-env empty)
(define (extend-env [env : Env] [x : Symbol] [v : Value]) : Env
  (cons (bind x v) env))

(define (lookup-env [n : Symbol] [env : Env]) : Value
  (type-case (Listof Binding) env
    [empty (error 'lookup "unbound variable")]
    [(cons b rst-env) (cond
                        [(eq? n (bind-name b))
                         (bind-val b)]
                        [else (lookup-env n rst-env)])]))

;; eval --------------------------------------

(define (op-num-num->proc [f : (Number Number -> Number)]) : (Value Value -> Value)
  (λ (v1 v2)
    (type-case Value v1
      [(numV n1)
       (type-case Value v2
         [(numV n2)
          (numV (f n1 n2))]
         [else
          (error 'eval "type error")])]
      [else
       (error 'eval "type error")])))

(define (op-num-bool->proc [f : (Number Number -> Boolean)]) : (Value Value -> Value)
  (λ (v1 v2)
    (type-case Value v1
      [(numV n1)
       (type-case Value v2
         [(numV n2)
          (boolV (f n1 n2))]
         [else
          (error 'eval "type error")])]
      [else
       (error 'eval "type error")])))

(define (op->proc [op : Op]) : (Value Value -> Value)
  (type-case Op op
    [(add) (op-num-num->proc +)]
    [(sub) (op-num-num->proc -)]
    [(mul) (op-num-num->proc *)]
    [(leq) (op-num-bool->proc <=)]))

(define (eval [e : Exp] [env : Env]) : Value
  (type-case Exp e
    [(numE n) n]
    [(varE x)
     (lookup-env x env)]
    [(opE l o r) ((op->proc o) (eval l env) (eval r env))]
    [(ifE b l r)
        (if (eval b env) (eval l env) (eval r env))]
       [else))

#;(define-type Exp
  (numE [n : Number])
  (varE [x : Symbol])
  (opE [l : Exp] [op : Op] [r : Exp])
  (ifE [b : Exp] [l : Exp] [r : Exp])
  (letE [x : Symbol] [e1 : Exp] [e2 : Exp])
  (appE [e1 : Symbol] [e2 : (Listof Exp)])
  (defineE [d : (Listof Exp)] [e : Exp])
  (funE [name : Symbol] [x : (Listof Symbol)] [e : Exp]))

(define (run [s : S-Exp]) : Value
  (error 'run "not implemented"))
(trace parse)