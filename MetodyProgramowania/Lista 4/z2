#lang racket

(define-struct leaf () #:transparent)
(define-struct node (l elem r) #:transparent)

(define (tree? x)
  (cond [(leaf? x) #t]
        [(node? x) (and (tree? (node-l x))
                        (tree? (node-r x)))]
        [else #f]))


(define (tree-node l elem r)
  (if (and (tree? l) (tree? r) (number? elem))
      (node l elem r)
      (error "nieprawidłowe pola węzła")))

( define t
   ( node
     ( node ( leaf ) 2 ( leaf ))
     5
     ( node ( node ( leaf ) 6 ( leaf ))
            8
            ( node ( leaf ) 9 ( leaf )))))


(define (fold-tree f x tree)
  (if (leaf? tree)
      x
        (let ((left-result (fold-tree f x (node-l tree)))
                    (right-result (fold-tree f x (node-r tree))))
                (f (node-elem tree) left-result right-result))))

(fold-tree + 0 t)

(define (tree-sum tree)
  (fold-tree + 0 tree))

(tree-sum t)

(define (tree-flip tree)
  (fold-tree (lambda (elem l r) (tree-node r elem l)) (leaf) tree))

(tree-flip t)

(define (tree-height tree)
  (fold-tree (lambda (elem l r) (+ 1 (max l r))) 0 tree))

(tree-height t)


(define (tree-span tree)
 (let ((left-value (fold-tree (lambda (elem l r) (if (number? l) l elem)) #f tree))
       (right-value (fold-tree (lambda (elem l r) (if (number? r) r elem)) #f tree)))
  (cons left-value right-value)))

(tree-span t)

(define (flatten tree)
  (fold-tree (lambda (value left right)
               (append left (cons value right)))
             '()
             tree))

(flatten t)

( define ( list->left-tree xs )
   ( foldl ( lambda (x t) ( node t x ( leaf ))) ( leaf ) xs ))
( define test-tree ( list->left-tree ( build-list 20000 identity )))
(time (flatten test-tree))