#lang racket

(define-struct leaf () #:transparent)
(define-struct node (l elem r) #:transparent)

(define (tree? x)
  (cond [(leaf? x) #t]
        [(node? x) (and (tree? (node-l x))
                        (tree? (node-r x)))]
        [else #f]))

(define (bst? tree)
  (define (bst-helper tree min-value max-value)
    (cond ((leaf? tree) #t)
          ((and (and (>= (node-elem tree) min-value)
                     (< (node-elem tree) max-value))
                (and (bst-helper (node-l tree) min-value (node-elem tree))
                     (bst-helper (node-r tree) (node-elem tree) max-value))) #t)
          (else #f)))
  (bst-helper tree -inf.0 +inf.0))


(define (tree-node l elem r)
  (if (and (tree? l) (tree? r) (number? elem))
      (node l elem r)
      (error "nieprawidłowe pola węzła")))

( define t
   ( node
     ( node ( leaf ) 2 ( leaf ))
     5
     ( node ( node ( leaf ) 6 ( leaf ))
            8
            ( node ( leaf ) 9 ( leaf )))))

(define (flat-append t xs)
  (if (leaf? t)
      xs
      (flat-append (node-l t)
                   (cons (node-elem t)
                         (flat-append (node-r t) xs)))))

(define (flatten2 tree)
  (flat-append tree '()))

(define (fold-tree f x tree)
  (if (leaf? tree)
      x
        (let ((left-result (fold-tree f x (node-l tree)))
                    (right-result (fold-tree f x (node-r tree))))
                (f (node-elem tree) left-result right-result))))

(define (insert-bst x t)
  (cond [(leaf? t) (node (leaf) x (leaf))]
        [(node? t)
         (cond [(< x (node-elem t))
                 (node (insert-bst x (node-l t))
                       (node-elem t)
                       (node-r t))]
                [else
                 (node (node-l t)
                       (node-elem t)
                       (insert-bst x (node-r t)))])]))

(define (treesort xs)
  (flatten2 (foldr insert-bst (leaf) xs)))

(treesort (list 2 4 6 4 8 4))

