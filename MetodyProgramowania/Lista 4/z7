#lang racket

(define empty-queue ; pusta kolejka
   (cons '() '()))

(define ( empty? q) ; czy kolejka jest pusta ?
  (null? (car q)))

(define ( push-back x q) ; dodaj element na koniec kolejki
  (if (empty? q)
      (cons x '())
      (cons (car q) (cons x (cdr q)))))

(define ( front q) ; podejrzyj element na poczatku kolejki
  (if (empty? q)
      (error "Kolejka jest pusta")
      (car q)))

(define (pop q) ; zdejmij element z przodu kolejki
  (cons (cadr q) (cddr k)))

empty-queue
(car empty-queue)
(empty? empty-queue)
(define f (push-back 1 empty-queue))
f
(define q (push-back 6 f))
q
(define z (push-back 4 q))
z
(define k (push-back 9 z))
k
(front k)
(pop k)

(cons (list 2 3 5) (list (list 2 5 6)))