#lang racket

( define-struct ord ( val priority ) #:transparent )
( define-struct hleaf () )
( define-struct hnode ( elem rank l r) #:transparent )


( define ( hord ? p h)
   ( or ( hleaf ? h)
        (<= p ( ord-priority ( hnode-elem h)))))

( define ( rank h)
   ( if ( hleaf? h)
        0
        ( hnode-rank h)))

( define ( heap ? h)
   ( or ( hleaf ? h)
        ( and ( hnode ? h)
              ( heap ? ( hnode-l h))
              ( heap ? ( hnode-r h))
              (<= ( rank ( hnode-r h))
                  ( rank ( hnode-l h)))
              (= ( hnode-rank h) (+ 1 ( hnode-rank ( hnode-r h))))
              ( hord ? ( ord-priority ( hnode-elem h))
                     ( hnode-l h))
              ( hord ? ( ord-priority ( hnode-elem h))
                     ( hnode-r h)))))

(define (make-node elem heap-a heap-b)
  (if (<= (ord-priority elem) (ord-priority (hnode-elem heap-a)))
      (hnode elem (+ 1 (rank heap-b)) heap-a heap-b)
      (hnode elem (+ 1 (rank heap-a)) heap-b heap-a)))

(define (heap-merge h1 h2)
  (cond ((hleaf? h1) h2)
        ((hleaf? h2) h1)
        ((< (ord-priority (hnode-elem h1))
            (ord-priority (hnode-elem h2)))
         (make-node (hnode-elem h1) 
                    (hnode-l h1) 
                    (heap-merge (hnode-r h1) h2)))
        (else (make-node (hnode-elem h2)
                         (hnode-l h2)
                         (heap-merge h1 (hnode-r h2))))))


