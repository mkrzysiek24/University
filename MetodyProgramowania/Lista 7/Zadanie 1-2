#lang plait

(define-type (2-3Tree 'a)
  (3node [l : (2-3Tree 'a)] [val1 : 'a] [s : (2-3Tree 'a)] [val2 : 'a] [r : (2-3Tree 'a)])
  (2node [l : (2-3Tree 'a)] [val : 'a] [r : (2-3Tree 'a)])
  (leaf))

(define example (3node (2node (leaf) 2 (leaf)) 3 (3node (leaf) 4 (leaf) 5 (leaf)) 8 (2node (leaf) 9 (leaf)))) 

(define (height t)
  (type-case (2-3Tree 'a) t
    [(leaf) 1]
    [(3node l val1 s val2 r) (if (equal? (height l) (height s))
                                 (if (equal? (height l) (height r))
                                     (+ 1 (height l))
                                     -inf.0)
                                 -inf.0)]
    [(2node l val r) (if (equal? (height l) (height r))
                         (+ 1 (height l))
                         -inf.0)]))

(define (tree-min-max t )
  (type-case (2-3Tree 'a) t
    [(leaf) (pair +inf.0 -inf.0)]
    [(3node l val1 s val2 r) (letrec ([lt (tree-min-max l)]
                                      [st (tree-min-max s)]
                                      [rt (tree-min-max r)]
                                      [lmin (if (< (fst lt) val1) (fst lt) val1)]
                                      [lmax (snd lt)]
                                      [smin (fst st)]
                                      [smax (snd st)]
                                      [rmin (fst rt)]
                                      [rmax (if (>(snd rt) val2) (snd rt) val2)])
                               (if (and (< lmax val1)
                                        (< val1 smin)
                                        (< smax val2)
                                        (< val2 rmin))
                                   (pair lmin rmax)
                                   (pair -inf.0 +inf.0)))]
    [(2node l val r) (letrec ([lt (tree-min-max l)]
                              [rt (tree-min-max r)]
                              [lmin (if (< (fst lt) val) (fst lt) val)]
                              [lmax (snd lt)]
                              [rmin (fst rt)]
                              [rmax (if (>(snd rt) val) (snd rt) val)])
                       (if (and (< lmax val)
                                (< val rmin))
                           (pair lmin rmax)
                           (pair -inf.0 +inf.0)))]))

(define (2-3tree? t)
  (type-case (2-3Tree 'a) t
    [(leaf) #t]
    [(3node l val1 s val2 r) (if (and (> (height t) -1) (not (equal? (tree-min-max t) (pair -inf.0 +inf.0)))) #t #f)]
    [(2node l val r) (if (and (> (height t) -1) (not (equal? (tree-min-max t) (pair -inf.0 +inf.0)))) #t #f)]))

(define-type (4-Tree 'a)
  (2-3-node [node : (2-3Tree 'a)])
  (4node [l : (2-3Tree 'a)] [val1 : 'a] [s1 : (2-3Tree 'a)] [val2 : 'a] [s2 : (2-3Tree 'a)] [val3 : 'a][r : (2-3Tree 'a)]))

;typ funkcji pomocniczej: 2-3-Tree -> 4-Tree

(define (insert x t)
    (type-case (4-Tree 'a) t
      [(4node l v1 s1 v2 s2 v3 r) (2node (2node l v1 s1) v2 (2node s2 v3 r))]
      [(2-3-node n) n]))