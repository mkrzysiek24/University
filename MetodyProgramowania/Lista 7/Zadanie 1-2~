#lang plait

(define-type (2-3Tree 'a)
  (3node [l : (2-3Tree 'a)] [val1 : 'a] [s : (2-3Tree 'a)] [val2 : 'a] [r : (2-3Tree 'a)])
  (2node [l : (2-3Tree 'a)] [val : 'a] [r : (2-3Tree 'a)])
  (leaf))

(define (height t)
  (type-case (2-3Tree 'a) t
    [(leaf) 1]
    [(3node l val1 s val2 r) (if (equal? (height l) (height s))
                                 (if (equal? (height l) (height r))
                                     (+ 1 (height l))
                                     -1)
                                 -1)]
    [(2node l val r) (if (equal? (height l) (height r))
                         (+ 1 (height l))
                         -1)]))

(define (tree-min-max t )
  (type-case (2-3Tree 'a) t
    [(leaf) (pair +inf.0 -inf.0)]
    [(3node l val1 s val2 r) (letrec ([lt (tree-min-max l)]
                                      [st (tree-min-max s)]
                                      [rt (tree-min-max r)]
                                      [lmin (fst lt)]
                                      [lmax (snd lt)]
                                      [smin (fst st)]
                                      [smax (snd st)]
                                      [rmin (fst rt)]
                                      [rmax (snd rt)])
                               (if (and (<= lmax val1)
                                        (<= val1 smin)
                                        (<= smax val2)
                                        (<= val2 rmin))
                                   (pair lmin rmax)
                                   (pair -inf.0 +inf.0)))]
    [(2node l val r) (letrec ([lt (tree-min-max l)]
                              [rt (tree-min-max r)]
                              [lmin (fst lt)]
                              [lmax (snd lt)]
                              [rmin (fst rt)]
                              [rmax (snd rt)])
                       (if (and (<= lmax val)
                                (<= val rmin))
                           (pair lmin rmax)
                           (pair -inf.0 -inf.0)))]))

(define (2-3tree? t)
  (type-case (2-3Tree 'a) t
    [(leaf) #t]
    [(3node l val1 s val2 r) (if (and (> (height t) -1) (not (equal? (tree-min-max t) (pair -inf.0 +inf.0)))) #t #f)]
    [(2node l val r) (if (and (> (height t) -1) (not (equal? (tree-min-max t) (pair -inf.0 +inf.0)))) #t #f)]))